{"version":3,"sources":["Nav.js","axios.js","Request.js","Banner.js","Row.js","HomeScreen.js","firebase.js","SignupScreen.js","LoginScreen.js","features/userSlice.js","ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","nav__content","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchPopularInMovies","fetchPopularInSeries","fetchAdventure","fetchComedy","fetchDrama","fetchMystery","fetchForKids","Banner","string","n","anime","setAnime","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","href","rel","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","animes","setAnimes","trailerUrl","setTrailerUrl","map","poster_path","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","handleTrailer","id","videoId","opts","height","width","playerVar","autoplay","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65b32b6a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './Nav.css';\r\n\r\nfunction Nav(){\r\nconst [show, handleShow] = useState(false);\r\nconst history = useHistory();\r\n\r\nconst transitionNavBar = () => {\r\n    if(window.scrollY > 100) {\r\n        handleShow(true);\r\n    }   else {\r\n        handleShow(false);\r\n    }\r\n\r\n}\r\n\r\nuseEffect(() => {\r\n    window.addEventListener(\"scroll\", \r\n    transitionNavBar);\r\n    return() => window.removeEventListener('scroll',\r\n    transitionNavBar); \r\n}, [])\r\n    return ( \r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n        <div nav__content=\"nav__content\">\r\n            <img \r\n            onClick={() => history.push(\"/\")}\r\n            className='nav__logo'\r\n            src=\"https://cdn.discordapp.com/attachments/852893329317822538/856907226647232512/aLEN_FINAL_LOGO.png\" \r\n            alt=\"\"\r\n            />\r\n\r\n            <img \r\n            onClick={() => history.push(\"/profile\")}\r\n            className='nav__avatar'\r\n            src=\"https://i.pinimg.com/originals/55/40/59/554059f14554a1501db801a7f4219b42.png\"\r\n            alt=\"\"\r\n            />\r\n        </div>\r\n    </div>\r\n\r\n    );\r\n\r\n\r\n        \r\n}\r\n\r\nexport default Nav","import axios from 'axios'\r\n \r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance; ","\r\nconst API_KEY = \"\";\r\n\r\nconst requests={\r\n    fetchTrending: `/discover/tv?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&with_keywords=210024`,\r\n    fetchPopularInMovies:`/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&page=1&with_keywords=210024`,\r\n    fetchPopularInSeries:`/discover/tv?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&page=1&with_keywords=210024`,\r\n    fetchAdventure: `/discover/tv?api_key=${API_KEY}&sort_by=popularity.desc&with_genres=10759&with_keywords=210024`,\r\n    fetchComedy: `/discover/tv?api_key=${API_KEY}&sort_by=popularity.desc&with_genres=35&with_keywords=210024`,\r\n    fetchDrama: `/discover/tv?api_key=${API_KEY}&sort_by=popularity.desc&with_genres=18&with_keywords=210024`,\r\n    fetchMystery:`/discover/tv?api_key=${API_KEY}&sort_by=popularity.desc&with_genres=9648&with_keywords=210024`,\r\n    fetchForKids:`/discover/tv?api_key=${API_KEY}&sort_by=popularity.desc&with_genres=10762&with_keywords=210024`,\r\n};\r\nexport default requests;","import React, {useEffect, useState} from \"react\";\r\nimport \"./Banner.css\";\r\nimport axios from './axios';\r\nimport requests from './Request';\r\n\r\nfunction Banner(){\r\n\r\n    const [anime, setAnime] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchAdventure);\r\n            setAnime(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n        \r\n    }, []);\r\n\r\n    console.log(anime);\r\n\r\n    function truncate(string, n) {\r\n        return string?.length > n ? string.substr(0, n - 1) + '...': string;\r\n\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" \r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${anime?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\",\r\n\r\n        }}\r\n        >\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Nunito:wght@600&display=swap\" rel=\"stylesheet\">\r\n\r\n        </link>  \r\n\r\n        <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title animate__fadeInDown\">\r\n            {anime?.title || anime?.name || anime?.original_name}\r\n        </h1>\r\n        {/* <div className=\"banner__buttons\">\r\n            <button className='banner__button'>Play</button>\r\n            <button className='banner__button'>My List</button>\r\n        </div> */}\r\n        \r\n        <h1 className=\"banner__description animate__fadeInUp\">\r\n            {truncate(\r\n            anime?.overview\r\n                ,300)}\r\n        </h1>\r\n        </div>\r\n\r\n        <div className=\"banner--fadeBottom\"/>\r\n        \r\n        </header>\r\n\r\n    );\r\n    \r\n\r\n}\r\n\r\nexport default Banner;","import React,{useEffect,useState} from 'react'\r\nimport \"./Row.css\";\r\nimport axios from \"./axios\";\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nfunction Row({title,fetchUrl,isLargeRow=false}) {\r\n    const[animes,setAnimes]=useState([]);\r\n    const[trailerUrl,setTrailerUrl] =useState(\"\")\r\n    const base_url=\"https://image.tmdb.org/t/p/w500\";\r\n\r\n    useEffect(() =>{\r\n    async function fetchData(){\r\n       const request =await axios.get(fetchUrl);\r\n       setAnimes(request.data.results);\r\n       return request;\r\n    }\r\n    fetchData();\r\n},[fetchUrl])\r\nconsole.log(animes);\r\nconst handleTrailer=(anime)=>{\r\n    if(trailerUrl){\r\n        setTrailerUrl(\"\")}\r\n    //  else if(anime.name=\"Attack on Titan\")\r\n    //  {\r\n    //     return <YouTube videoId=\"M_OauHnAFc8\" opts={opts} />;\r\n    //  }\r\n    else{\r\n        movieTrailer(anime?.name || \"\").then((url)=>{\r\n            const urlParams=new URLSearchParams(new URL(url).search)\r\n            setTrailerUrl(urlParams.get('v'));\r\n        }).catch(()=> console.log('Temporarily unavailable'))\r\n    }\r\n\r\n}\r\nconsole.log(trailerUrl);\r\nconst opts={\r\n    height:\"390\",\r\n    width:\"100%\",\r\n    playerVar:{\r\n        autoplay:1,\r\n    }\r\n}\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n            {animes.map(anime=>(\r\n               (isLargeRow && anime.poster_path) \r\n                && (\r\n                <img className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                key={anime.id}\r\n                onClick={()=>handleTrailer(anime)}\r\n                 src={`${base_url}${\r\n                    isLargeRow?anime.poster_path :anime.poster_path\r\n                }`} alt={anime.name} />\r\n              \r\n               )\r\n             \r\n            ))}\r\n            </div>\r\n        \r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row","import React from 'react';\r\nimport \"./homescreen.css\";\r\nimport Nav from './Nav';\r\nimport Banner from './Banner';\r\nimport requests from './Request';\r\nimport Row from './Row';\r\n\r\nfunction HomeScreen(){\r\n    return (\r\n    <div className=\"homeScreen\">\r\n        <Nav />\r\n\r\n        <Banner />\r\n    \r\n\r\n    \r\n    <Row title=\"Top Series\" \r\n    fetchUrl={requests.fetchPopularInSeries}\r\n    isLargeRow />\r\n    <Row \r\n    title=\"Top Movies\" \r\n    fetchUrl={requests.fetchPopularInMovies}\r\n    isLargeRow\r\n    />\r\n    <Row title=\"Top For Kids\" \r\n    fetchUrl={requests.fetchForKids}\r\n    isLargeRow\r\n    />\r\n    <Row title=\"Top Adventure\" \r\n    fetchUrl={requests.fetchAdventure}\r\n    isLargeRow\r\n     />\r\n    <Row title=\"Top Comedy\" \r\n    fetchUrl={requests.fetchComedy}\r\n    isLargeRow\r\n    />\r\n    <Row title=\"Top Drama\" \r\n    fetchUrl={requests.fetchDrama }\r\n    isLargeRow\r\n     />\r\n    <Row title=\"Top Mystery\" \r\n    fetchUrl={requests.fetchMystery}\r\n    isLargeRow\r\n     />\r\n    </div>);\r\n    \r\n}\r\n\r\nexport default HomeScreen","import firebase from 'firebase';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCwS1oh1VwxAB_83YJzJi5lPsMXiAC-HBk\",\r\n  authDomain: \"animeverse-84500.firebaseapp.com\",\r\n  projectId: \"animeverse-84500\",\r\n  storageBucket: \"animeverse-84500.appspot.com\",\r\n  messagingSenderId: \"45254730784\",\r\n  appId: \"1:45254730784:web:5c8933fba99a8b470ac845\",\r\n  measurementId: \"G-SRECE25KYT\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport {auth};\r\nexport default db;","import React, {useRef} from 'react';\r\nimport { auth } from './firebase';\r\nimport './SignupScreen.css';\r\n\r\nfunction SignupScreen() {\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n\r\n        const register = (e) => {\r\n            e.preventDefault();\r\n\r\n            auth.createUserWithEmailAndPassword(\r\n                emailRef.current.value,\r\n                passwordRef.current.value\r\n            )\r\n            .then((authUser) => {\r\n                console.log(authUser);\r\n\r\n\r\n            })\r\n            .catch((error) => {\r\n                alert(error.message);\r\n\r\n            });\r\n        };\r\n\r\n        const signIn = (e) => {\r\n            e.preventDefault();\r\n            \r\n            auth\r\n            .signInWithEmailAndPassword(\r\n                emailRef.current.value,\r\n                passwordRef.current.value\r\n            )\r\n            .then((authUser) => {\r\n                console.log(authUser);\r\n            })\r\n            .catch((error) => alert(error.message));\r\n\r\n\r\n        };\r\n\r\n    return (\r\n        <div className='signupScreen'>\r\n            <form>\r\n                <h1>\r\n                    Sign In\r\n                </h1>\r\n                <input ref={emailRef}placeholder=\"Email\" type=\"email\" />\r\n                <input ref={passwordRef}placeholder=\"Password\" type=\"password\"/>\r\n                <a className=\"btn-13\" type=\"submit\" onClick={signIn}>\r\n                   Sign In\r\n             \r\n                </a>\r\n                <h4>\r\n                    <span className=\"signupScreen__gray\">New to Animeverse? </span>\r\n                    <span className=\"signupScreen__link\" onClick={register}>\r\n                        Sign Up now.\r\n                    </span>\r\n                </h4>\r\n            </form>\r\n\r\n            \r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default SignupScreen;\r\n","import React, {useState} from 'react'\r\nimport './LoginScreen.css'\r\nimport SignupScreen from './SignupScreen';\r\n\r\nfunction LoginScreen() {\r\n    const[signIn, setSignIn]= useState (false);\r\n    return (\r\n        <div className='loginScreen'>\r\n            <div className=\"loginScreen__background\">\r\n                <img \r\n                className =\"loginScreen__logo\" \r\n                src=\"https://cdn.discordapp.com/attachments/852893329317822538/856907226647232512/aLEN_FINAL_LOGO.png\" \r\n                alt=\"\"/>\r\n                <button  onClick={() => setSignIn(true)}  \r\n                className='loginScreen__button'>\r\n                    Sign In\r\n                </button>\r\n\r\n\r\n                <div className = \"loginScreen__gradient\" />\r\n\r\n            </div>\r\n\r\n            <div className = \"loginScreen__body\">\r\n                {signIn ? (\r\n                    <SignupScreen />\r\n                ): (\r\n\r\n                    <>\r\n                    <h1>\r\n                        Watch all your favorite Anime at one place\r\n                    </h1>\r\n                    <h2>\r\n                        Watch any Anime. At any time.\r\n                    </h2>\r\n                    <h3>\r\n                        Ready to watch? Enter your email to \r\n                        create or restart your membership.\r\n                    </h3>\r\n\r\n\r\n                    {/* <div className=\"loginScreen__input\">\r\n                        <form>\r\n                            <input type='email' placeholder=\"Email Address\"/>\r\n                            <button\r\n                            onClick={() => setSignIn(true)} \r\n                            className='loginScreen__getStarted'>\r\n                                GET STARTED\r\n                            </button>\r\n\r\n                        </form>\r\n                    </div> */}\r\n                </>\r\n\r\n                )}\r\n               \r\n            </div>\r\n\r\n\r\n        </div>\r\n    \r\n    );\r\n    \r\n}\r\n\r\nexport default LoginScreen\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user:null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n\n    }\n    },\n  });\n\n\nexport const { login,logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import React from 'react';\r\nimport \"./ProfileScreen.css\";\r\nimport Nav from './Nav';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport { auth } from './firebase';\r\n\r\nfunction ProfileScreen() {\r\n    const user = useSelector(selectUser)\r\n    return (\r\n        <div className='profileScreen'>\r\n            <Nav />\r\n            <div className=\"profileScreen__body\">\r\n                <h1>Edit Profile</h1>\r\n                <div className=\"profileScreen__info\">\r\n                    <img \r\n                    src=\"https://cdn.discordapp.com/attachments/852893329317822538/867417083603845130/65-653894_dodo-clipart-rest-sleep-pokemon-pikachu.png\" \r\n                    alt=\"\" />\r\n                    <div className=\"profileScreen__details\">\r\n                        <h2>{user.email}</h2>\r\n                        <div className=\"profileScreen__plans\">\r\n                            <h3>I'll take a potato chip... AND EAT IT!</h3>\r\n                            \r\n                            \r\n\r\n                            <button onClick={() => auth.signOut()} \r\n                            className=\"profileScreen__signOut\">\r\n                                Sign Out\r\n                            </button>\r\n                            { <h4 className = \"profileScreen__mentions\">Made By:- Austin, Brian, Alen, Hansel</h4> }\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileScreen\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport HomeScreen from './HomeScreen';\nimport LoginScreen from './LoginScreen';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport { auth } from './firebase';\nimport { login, logout, selectUser } from './features/userSlice';\nimport ProfileScreen from './ProfileScreen';\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch(selectUser);\n  useEffect(() =>{\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      if (userAuth) {\n        //Logged in\n        dispatch(\n          login({\n          uid: userAuth.uid,\n          email:userAuth.email,\n\n        })\n          );\n      } else {\n        //Logged out\n        dispatch(logout());\n      }\n    });\n\n    return unsubscribe;\n\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user?(\n          <LoginScreen />\n        ) : (\n        \n        <Switch> \n        <Route path='/profile'>\n          <ProfileScreen />\n\n        </Route>\n        <Route exact path=\"/\">\n          <HomeScreen />\n          </Route>\n        </Switch>\n  )}\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}